networks:
  pgnet:
    name: pgnet
    driver: bridge

volumes:
  pg_primary_data:
  pg_replica_data:

x-postgres-common: &postgres-common
  image: postgres:16-alpine
  restart: always
  networks: [pgnet]
  environment:
    POSTGRES_USER: ${POSTGRES_USER}
    POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    POSTGRES_DB: ${POSTGRES_DB}
    POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"
    POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"

services:
  postgres_primary:
    <<: *postgres-common
    user: postgres
    container_name: pg-primary
    hostname: pg-primary
    ports: ["5432:5432"]
    command: >
      postgres
      -c listen_addresses='*'
      -c wal_level=logical
      -c hot_standby=on
      -c max_wal_senders=50
      -c max_replication_slots=50
      -c log_line_prefix='%m [%p] %u@%d %r %a '
    volumes:
      - pg_primary_data:/var/lib/postgresql/data
      - ./00_init.sql:/docker-entrypoint-initdb.d/00_init.sql:ro
      - ./01_pg_hba_replication.sh:/docker-entrypoint-initdb.d/01_pg_hba_replication.sh:ro

  postgres_replica:
    <<: *postgres-common
    user: "0"  # sobe como root; o script desce para 'postgres' apÃ³s chown
    container_name: pg-replica
    hostname: pg-replica
    depends_on:
      - postgres_primary
    ports: ["5433:5432"]
    environment:
      PGUSER: ${REPL_USER}
      PGPASSWORD: ${REPL_PASSWORD}
    volumes:
      - pg_replica_data:/var/lib/postgresql/data
      - ./replica-entrypoint.sh:/usr/local/bin/replica-entrypoint.sh:ro
    entrypoint: ["/usr/local/bin/replica-entrypoint.sh"]
